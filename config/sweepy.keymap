#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 9 15 16 18 19 26 27 28 29 30 31 35 36 37 17>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <20 21 0 10 22 11 1 2 12 23 3 4 13 14 24 24 25 33 32 34>;
            hold-trigger-on-release;
        };

        num_word: num_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
            ignore-numbers;
        };

        mm_comma: mm_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_COMMA";
            bindings = <&macro_comma>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_comma_ru: mm_comma_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_COMMA_RU";
            bindings = <&macro_comma_ru>, <&kp LS(N4)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_dot: mm_dot {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_DOT";
            bindings = <&macro_dot>, <&kp LS(SEMI)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_dot_ru: mm_dot_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_DOT_RU";
            bindings = <&macro_dot_ru>, <&kp LS(N6)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_minus: mm_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_MINUS";
            bindings = <&kp MINUS>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        swap_win: swapper_win {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_WIN";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;

            ignored-key-positions = <13 16 17 18 19>;
        };

        swap_tab: swapper_tab {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_TAB";
            #binding-cells = <0>;
            bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;

            ignored-key-positions = <13 16 17 18 19>;
        };
    };

    macros {
        macro_comma: macro_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "MACRO_COMMA";
        };

        macro_comma_ru: macro_comma_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(SLASH) &kp SPACE>;
            label = "MACRO_COMMA_RU";
        };

        macro_dot: macro_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
            label = "MACRO_DOT";
        };

        macro_dot_ru: macro_dot_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SLASH &kp SPACE &sk LSHFT>;
            label = "MACRO_DOT_RU";
        };

        macro_lng: macro_lng {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPS &tog 2>;
            label = "MACRO_LNG";
        };

        macro_lng_en: macro_lng_sync {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPS &to 0>;
            label = "MACRO_LNG_SYNC";
        };

        macro_lt: macro_lt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPS &kp LS(COMMA) &kp CAPS>;
            label = "MACRO_LT";
        };

        macro_gt: macro_gt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPS &kp LS(DOT) &kp CAPS>;
            label = "MACRO_GT";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_lng_l {
            bindings = <&macro_lng>;
            key-positions = <16 4>;
        };

        combo_lng_r {
            bindings = <&macro_lng>;
            key-positions = <19 7>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <15 3>;
        };

        combo_ret {
            bindings = <&kp RET>;
            key-positions = <19 31>;
        };

        combo_bspc {
            bindings = <&kp BACKSPACE>;
            key-positions = <18 19>;
        };

        combo_spc {
            bindings = <&kp SPACE>;
            key-positions = <16 28>;
        };

        combo_num_word_en {
            bindings = <&num_word 4>;
            key-positions = <8 20>;
            layers = <0>;
        };

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <21 9>;
        };

        combo_ins {
            bindings = <&kp INS>;
            key-positions = <18 30>;
        };

        combo_mouse_l {
            bindings = <&tog 9>;
            key-positions = <5 4>;
        };

        combo_mouse_r {
            bindings = <&tog 9>;
            key-positions = <6 7>;
        };

        combo_num_word_ru {
            bindings = <&num_word 5>;
            key-positions = <8 20>;
            layers = <2>;
        };

        combo_lbkt {
            bindings = <&kp LBKT>;
            key-positions = <10 9>;
        };

        combo_sqt {
            bindings = <&kp SQT>;
            key-positions = <21 22>;
        };

        combo_rbkt {
            bindings = <&kp RBKT>;
            key-positions = <33 34>;
        };

        combo_caps {
            bindings = <&kp CAPS>;
            key-positions = <6 18>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            // ----------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  | T    |   |  Y     |  U  |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  | G    |   |  H     |  J  |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  | B    |   |  N     |  M  |  ,  |  .  |  /  |
            //                   | GUI | LWR  |   |  BKSP  | RSE |

            bindings = <
            &kp Q        &kp W        &kp E         &kp R         &kp T         &kp Y        &kp U         &kp I         &kp O        &kp P
            &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHFT F  &lt 9 G       &kp H        &hmr LSHFT J  &hmr LCTRL K  &hmr LALT L  &hmr LGUI SEMI
            &kp Z        &lt 8 X      &lt 4 C       &lt 6 V       &kp B         &kp N        &kp M         &kp COMMA     &kp DOT      &kp FSLH
                                                    &lt 1 SPACE   &lt 11 ESC    &lt 4 ENTER  &mo 9
            >;
        };
    };
};
